name: Foodprivet

on: 
  push:
    branches:
      - master temp++

jobs:
  tests:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
      
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      
      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
          pip install -r backend/requirements.txt
          
      - name: test with flake8
        run: |
          python -m flake8

  build_and_push_to_docker_hub:
    name: push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: check out the repo
        uses: actions/checkout@v3
      - name: set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: push frontend to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

      - name: push backend to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram:latest

      - name: push nginx to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: ./infra
          file: ./infra/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/nginx:latest

  deploy:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs:
      build_and_push_to_docker_hub
    steps:
    - name: checkout repo
      uses: actions/checkout@v3     
    - name: copy docker-compose.yml and nginx.conf via ssh
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        password: ${{ secrets.PASSWORD }}
        # key: ${{ secrets.SSH_KEY }}
        # passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: 'infra/docker-compose.yml'
        target: '~/food/'
    - name: executing remote ssh command to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        password: ${{ secrets.PASSWORD }}
        # key: ${{ secrets.SSH_KEY }}
        # passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd food/infra/
          sudo docker compose stop
          sudo docker ps -a | grep Exit | cut -d ' ' -f 1 | xargs sudo docker rm
          touch .env
          echo '# Привет!' | sudo tee .env
          sudo echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
          sudo echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          sudo echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          sudo echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          sudo echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          sudo echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          sudo echo SECRET_KEY='${{ secrets.SECRET_KEY }}' >> .env
          sudo echo DEBUG='${{ secrets.DEBUG }}' >> .env
          sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend
          sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/foodgram
          sudo docker compose up -d
          sudo docker image prune -af
          sudo docker compose exec -T backend python manage.py migrate
          sudo docker compose exec -T backend python manage.py collectstatic --no-input
          sudo docker compose exec -T backend python manage.py load_ingredients

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Деплой успешно выполнен!
